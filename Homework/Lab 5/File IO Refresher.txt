Title:	FILE I/O REFRESHER	 
Author:	Lari H. Norri 
Title:	Lead Lab Specialist ATP/DX
Date:	04/11/06

If your rusty on File IO...

Here's a tiny refresher:

two ways to manipulate files...

1. fstream - (including ifstream and ofstream) #include <fstream>
2. FILE* - (file pointers) #include <stdio.h> (I won't be explaining this one... research it)

----------------------------------------------------------------------------------------------
USING FSTREAM OBJECTS:
----------------------------------------------------------------------------------------------

Opening Files with fstream...
**********************************************************************************************

1. ASCII mode for reading an existing file :

	ifstream read; - (the "i" stands for "input")
	read.open("myfiles.txt");

2. Writing out a new file in binary :

	ofstream write; - (the "o" stands for "output")
	write.open("newfile.dat", ios_base::binary);

3. Reading AND Writing to a brand new file :
	
	fstream read_write; - (without the "i" or "o" fstream can do both if you want)
	read_write.open("complexfile.tex", ios_base::out | ios_base::in | ios_base::trunc);


fstream Flags...
**********************************************************************************************

1. ios_base::in		- (fstream.open) For reading from files
2. ios_base::out	- (fstream.open) For writing to files    
3. ios_base::binary	- (fstream.open) For opening files in Binary mode
4. ios_base::trunc	- (fstream.open) For creating/overwriting files    
5. ios_base::beg	- (fstream.seekg/seekp) For seeking to the begining of a file
6. ios_base::end	- (fstream.seekg/seekp) For seeking to the end of a file
7. ios_base::cur	- (fstream.seekg/seekp) For seeking from your current file position


fstream Reading and Writing data...
**********************************************************************************************

1. Writing ASCII text to a file :

	myfstream << "I can write text to a file! I am teh 1337 haX0r!";  

2. Writing the binary data of a variable to a file :

	MYSTRUCT myvariable;
	myfstream.write((char*)&myvaribale, sizeof(MYSTRUCT));

3. Reading one line of ASCII text from a file :

	char buffer[265];
	myfstream.getline(buffer, 255, '\n');

4. Reading the binary data from a file into a variable :

	MYSTRUCT myvariable;
	myfstream.read((char*)&myvaribale, sizeof(MYSTRUCT));


fstream moving about the file...
**********************************************************************************************

Inside an fstream object exist the "get" and "put" the pointers...

	The "get" pointer points to the byte location in the file where fstream will read data.
	The "put" pointer points to the byte location in the file where fstream will write data.

	The "get" pointer defaults to the begining of a file, it moves whenever you read data.	
	The "set" pointer defaults to the begining of a file, it moves whenever you write data.

You can move the "get" and "set" pointers in the file without reading or writing using seekg/p()
Using the function tellg/p() you can discover the byte location of the "get" or "put" pointers 		

1. Moving the "get" pointer to the end of a file : 

	myfstream.seekg( 0, ios_base::end );

2. Moving the "put" pointer to 12 bytes from the begining of a file :

	myfstream.seekp( 12, ios_base::beg );

3. Moving the "get" pointer 50 bytes forward from it's current position :

	myfstream.seekg( 50, ios_base::cur );

4. Using seekg/p() & tellg/p() to determine the size of a file in bytes :

	myfstream.seekg( 0, ios_base::end ); - (put the "get" pointer at the end)
	int file_size = myfstream.tellg() - (report the position of the "get" pointer)


----------------------------------------------------------------------------------------------
COMMON PITFALLS IN FILE I/O
----------------------------------------------------------------------------------------------

Forgeting about the "fail bit"
**********************************************************************************************

Most file I/O systems have what is known as a "fail bit". The "fail bit" is a property that alerts 
the system if a file operation failed or did not complete properly. If the "fail bit" is ON the file 
system will not correctly execute any commands until it is turned OFF or "cleared".

Example: 

	I use fstream to read 200 bytes from a file... unfortunately the file I opened is only
 	150 bytes in length. This action gets me my data, however the "fail bit" is now set. 
	So then I close myfile and use the fstream object to open a new file. The file opens
	just fine, however when I try and read data nothing happens. This is because the
	"fail bit" is still ON from our first improperly sized read.

Solution:

	Besides reading only exactly what you need from a file without going over 1 byte. You
	can simply detect if the "fail bit" has been turned ON, and then just turn it OFF.
	To find out how to do this observe the following :

1. Getting the status of the "fail bit" :

	bool is_failed = myfstream.eof();

2. Turning the "fail bit" OFF, AKA "clearing" the "fail bit" :

	myfstream.clear();

*Special Note:

	REMEMBER!!! the "fail bit" is only turned on when you go outside the bounds of a file.
	This means that if you have a 27 byte file and you read exactly 27 bytes...
	The "fail bit" will NOT! I repeat NOT be activated! 
	This means that if you have a loop with "!eof()" as your condition, the loop will not
	end until you have at least 1 bad read. 
	     			 

Ignoring compiler byte aligment
**********************************************************************************************

Typically when reading data from a structured binary file, you have structures or classes that
hold data that is a exact match for what you find in the file.

Example:

	// layout of a possible image file header	// structure for reading in the header 
	File ID 	- 1 bytes			struct IMG_HEADER
	Compresion type	- 1 byte			{	
	Img Width	- 4 bytes				uchar FID;
	Img Height	- 4 bytes				uchar Compression;	
	Bits per pixel	- 1 byte	  			int Width, Height;
	// image data follows...				uchar Bitsperpixel;
							};
	total bytes : 11				total bytes : 11
							
	This is exactly what is in the file.		sizeof(IMG_HEADER) : 16 bytes WTF!?

	Notice that even though I have only 11 bytes worth of variables declared in my stucture,
	my "sizeof(IMG_HEADER)" command returns 16! This is due to something called 
	"byte aligment", your compiler automatically pads structures and classes to the nearest
	byte multiple defined by a compiler setting. The reason it does this is for speed.
	Modern CPU's have registers 32 bits across. It is far more efficient to pad data
	coming in to the CPU, rather that try and split it across registers. In the above
	sample notice that the compiler ramped the number of bytes up from 11 to 16. This means
	that the compiler currently has a byte aligment setting of 8. The compiler simply
	noticed that your structure was 11 bytes and bumped it up to the nearest multiple of 8.
	EX: (11 > 8)... (8+8 == 16)... (16 > 11) so we arrive at 16. As you might have guessed
	byte aligment can wreak havok on your file I/O by tricking you into reading the wrong
	amount of data from your file. This "over read" will make it so that reading other data
	from your file will be a couple of bytes off, thus ruining the data's intergity.

Solutiuon:

	A basic but effective solution to this problem is to read the data into the structure's
	variables one at a time.

	Correct : (avoids possible byte aligment issues)

		IMG_HEADER data;
		myfstream.read( &data.FID, 1 );   
  		myfstream.read( &data.Compression, 1 );
		myfstream.read( &data.Width, 4 );
		myfstream.read( &data.Height, 4 );
		myfstream.read( &data.Bitsperpixel, 1 );            	

	Incorrect : (although better looking, this code may read too many bytes) 

		IMG_HEADER data;
		myfstream.read( &data, sizeof(data) );

	*special Note :

		what about this?... " myfstream.read( &data, 11 ); "
		
		Although this is a good idea in theory, you are NOT guarunteed that the padded
		bytes will end up at end of your structure. This of course will screw up your
		read, because pad bytes will get data your other bytes are supposed to get.


	Another possible solution to this problem is to use the settings on your compiler to
	alter the way it does byte padding. Byte padding is an optimization, so it is
	reccomended that you only remove byte padding from the structures you plan to read or
	write to disk.

	If you are using a Microsoft Visual Studio product...

		look into the preproccessor command "#pragma pack" for a byte aligment solution


	

